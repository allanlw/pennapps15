#!/usr/bin/env node
// Stand alone client
// set HOST and PORT environment variables to point to an instance
// and it will run like any other client
var io = require('../lib/mysocket.io-client');
var request = require("request")
var initClient = require("../public/scripts/client_worker_inner");

var host = process.env.HOST || 'localhost';
var port = process.env.PORT || 3000;

var url = 'http://' + host + ":" + port;
console.log(url);

var jar = request.jar();

request.get({
  url: url,
  jar: jar
}, function(err, resp, body) {
  console.log("http done");
  console.log(resp.headers['set-cookie']);
  var socket = io.connect(url, {"auto connect": false});

  // Fuck this soooo much
  // ripped it off. See work-already npm package for details
  // this is the core of the hack though
  function empty () { }
  socket.socket.handshake = function (fn) {
    var self = this
      , options = this.options;

    console.log("In handshake!!");

    function complete (data) {
      if (data instanceof Error) {
        self.connecting = false;
        self.onError(data.message);
      } else {
        fn.apply(null, data.split(':'));
      }
    };

    var url = [
          'http' + (options.secure ? 's' : '') + ':/'
        , options.host + ':' + options.port
        , options.resource
        , io.protocol
        , io.util.query(this.options.query, 't=' + +new Date)
      ].join('/');

    if (this.isXDomain() && !io.util.ua.hasCORS) {
      var insertAt = document.getElementsByTagName('script')[0]
        , script = document.createElement('script');

      script.src = url + '&jsonp=' + io.j.length;
      insertAt.parentNode.insertBefore(script, insertAt);

      io.j.push(function (data) {
        complete(data);
        script.parentNode.removeChild(script);
      });
    } else {
      var xhr = io.util.request();

      xhr.open('GET', url, true);

      /* Add these lines */
      xhr.setDisableHeaderCheck(true);
      xhr.withCredentials = true;
      xhr.setRequestHeader("Cookie", resp.headers['set-cookie']);

      xhr.onreadystatechange = function () {
        if (xhr.readyState == 4) {
          xhr.onreadystatechange = empty;

          if (xhr.status == 200) {
            complete(xhr.responseText);
          } else if (xhr.status == 403) {
            self.onError(xhr.responseText);
          } else {
            self.connecting = false;            
            !self.reconnecting && self.onError(xhr.responseText);
          }
        }
      };
      xhr.send(null);
    }
  };

  socket.socket.connect();

  function postJSON(event, data) {
    console.log(event + ": " + JSON.stringify(data));
  }

  socket.on("connect", function() {
    socket.emit("ready-outside");
    initClient(socket, postJSON);
  });

  var x = ["error", "disconnect", "reconnect", "reconnect_attempt", "reconnecting",
    "reconnect_error", "reconnect_failed"];
  var i;
  for (i = 0; i < x.length; i++) {
    socket.on(x[i], function(z) {
      return function(e) { console.log(z + ":"); console.log(e); }
    }(x[i]));
  }
});

